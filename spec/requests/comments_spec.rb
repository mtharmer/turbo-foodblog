# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/comments', type: :request do
  let(:user) { create(:user) }

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      before do
        sign_in user
      end

      let(:recipe) { create(:recipe, user: user) }

      it 'creates a new Comment' do
        comment = build(:comment, user: user, recipe: recipe)
        expect do
          post recipe_comments_url(recipe), params: { comment: comment.attributes }
        end.to change(Comment, :count).by(1)
      end

      it 'redirects to the recipe' do
        comment = build(:comment, user: user, recipe: recipe)
        post recipe_comments_url(recipe), params: { comment: comment.attributes }
        expect(response).to redirect_to(recipe_url(recipe))
      end
    end

    context 'with invalid parameters' do
      before do
        sign_in user
      end

      let(:recipe) { create(:recipe, user: user) }
      let(:comment) { build(:comment, message: nil) }

      it 'does not create a new Comment' do
        expect do
          post recipe_comments_url(recipe), params: { comment: comment.attributes }
        end.not_to change(Comment, :count)
      end

      it 'redirects to the original recipe' do
        post recipe_comments_url(recipe), params: { comment: comment.attributes }
        expect(response).to have_http_status(:found)
      end
    end
  end
end
